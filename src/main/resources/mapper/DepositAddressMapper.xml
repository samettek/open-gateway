<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.vite.gateway.database.dao.mapper.generated.DepositAddressMapper">
  <resultMap id="BaseResultMap" type="org.vite.gateway.database.po.generated.DepositAddress">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="origin_blockchain" jdbcType="VARCHAR" property="originBlockchain" />
    <result column="origin_address" jdbcType="VARCHAR" property="originAddress" />
    <result column="memo" jdbcType="VARCHAR" property="memo" />
    <result column="mapping_blockchain" jdbcType="VARCHAR" property="mappingBlockchain" />
    <result column="mapping_address" jdbcType="VARCHAR" property="mappingAddress" />
    <result column="state" jdbcType="VARCHAR" property="state" />
    <result column="ctime" jdbcType="TIMESTAMP" property="ctime" />
    <result column="utime" jdbcType="TIMESTAMP" property="utime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, origin_blockchain, origin_address, memo, mapping_blockchain, mapping_address, 
    `state`, ctime, utime
  </sql>
  <select id="selectByExample" parameterType="org.vite.gateway.database.po.generated.DepositAddressCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from deposit_address
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from deposit_address
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from deposit_address
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="org.vite.gateway.database.po.generated.DepositAddressCriteria">
    delete from deposit_address
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.vite.gateway.database.po.generated.DepositAddress">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into deposit_address (origin_blockchain, origin_address, 
      memo, mapping_blockchain, mapping_address, 
      `state`, ctime, utime
      )
    values (#{originBlockchain,jdbcType=VARCHAR}, #{originAddress,jdbcType=VARCHAR}, 
      #{memo,jdbcType=VARCHAR}, #{mappingBlockchain,jdbcType=VARCHAR}, #{mappingAddress,jdbcType=VARCHAR}, 
      #{state,jdbcType=VARCHAR}, #{ctime,jdbcType=TIMESTAMP}, #{utime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.vite.gateway.database.po.generated.DepositAddress">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into deposit_address
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="originBlockchain != null">
        origin_blockchain,
      </if>
      <if test="originAddress != null">
        origin_address,
      </if>
      <if test="memo != null">
        memo,
      </if>
      <if test="mappingBlockchain != null">
        mapping_blockchain,
      </if>
      <if test="mappingAddress != null">
        mapping_address,
      </if>
      <if test="state != null">
        `state`,
      </if>
      <if test="ctime != null">
        ctime,
      </if>
      <if test="utime != null">
        utime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="originBlockchain != null">
        #{originBlockchain,jdbcType=VARCHAR},
      </if>
      <if test="originAddress != null">
        #{originAddress,jdbcType=VARCHAR},
      </if>
      <if test="memo != null">
        #{memo,jdbcType=VARCHAR},
      </if>
      <if test="mappingBlockchain != null">
        #{mappingBlockchain,jdbcType=VARCHAR},
      </if>
      <if test="mappingAddress != null">
        #{mappingAddress,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="ctime != null">
        #{ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="utime != null">
        #{utime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.vite.gateway.database.po.generated.DepositAddressCriteria" resultType="java.lang.Long">
    select count(*) from deposit_address
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update deposit_address
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.originBlockchain != null">
        origin_blockchain = #{record.originBlockchain,jdbcType=VARCHAR},
      </if>
      <if test="record.originAddress != null">
        origin_address = #{record.originAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.memo != null">
        memo = #{record.memo,jdbcType=VARCHAR},
      </if>
      <if test="record.mappingBlockchain != null">
        mapping_blockchain = #{record.mappingBlockchain,jdbcType=VARCHAR},
      </if>
      <if test="record.mappingAddress != null">
        mapping_address = #{record.mappingAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        `state` = #{record.state,jdbcType=VARCHAR},
      </if>
      <if test="record.ctime != null">
        ctime = #{record.ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.utime != null">
        utime = #{record.utime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update deposit_address
    set id = #{record.id,jdbcType=BIGINT},
      origin_blockchain = #{record.originBlockchain,jdbcType=VARCHAR},
      origin_address = #{record.originAddress,jdbcType=VARCHAR},
      memo = #{record.memo,jdbcType=VARCHAR},
      mapping_blockchain = #{record.mappingBlockchain,jdbcType=VARCHAR},
      mapping_address = #{record.mappingAddress,jdbcType=VARCHAR},
      `state` = #{record.state,jdbcType=VARCHAR},
      ctime = #{record.ctime,jdbcType=TIMESTAMP},
      utime = #{record.utime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.vite.gateway.database.po.generated.DepositAddress">
    update deposit_address
    <set>
      <if test="originBlockchain != null">
        origin_blockchain = #{originBlockchain,jdbcType=VARCHAR},
      </if>
      <if test="originAddress != null">
        origin_address = #{originAddress,jdbcType=VARCHAR},
      </if>
      <if test="memo != null">
        memo = #{memo,jdbcType=VARCHAR},
      </if>
      <if test="mappingBlockchain != null">
        mapping_blockchain = #{mappingBlockchain,jdbcType=VARCHAR},
      </if>
      <if test="mappingAddress != null">
        mapping_address = #{mappingAddress,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        `state` = #{state,jdbcType=VARCHAR},
      </if>
      <if test="ctime != null">
        ctime = #{ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="utime != null">
        utime = #{utime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.vite.gateway.database.po.generated.DepositAddress">
    update deposit_address
    set origin_blockchain = #{originBlockchain,jdbcType=VARCHAR},
      origin_address = #{originAddress,jdbcType=VARCHAR},
      memo = #{memo,jdbcType=VARCHAR},
      mapping_blockchain = #{mappingBlockchain,jdbcType=VARCHAR},
      mapping_address = #{mappingAddress,jdbcType=VARCHAR},
      `state` = #{state,jdbcType=VARCHAR},
      ctime = #{ctime,jdbcType=TIMESTAMP},
      utime = #{utime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>