<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.vite.gateway.database.dao.mapper.generated.TokenInfoMapper">
  <resultMap id="BaseResultMap" type="org.vite.gateway.database.po.generated.TokenInfo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="origin_blockchain" jdbcType="VARCHAR" property="originBlockchain" />
    <result column="mapping_blockchain" jdbcType="VARCHAR" property="mappingBlockchain" />
    <result column="origin_token_id" jdbcType="VARCHAR" property="originTokenId" />
    <result column="mapping_token_id" jdbcType="VARCHAR" property="mappingTokenId" />
    <result column="token_name" jdbcType="VARCHAR" property="tokenName" />
    <result column="deposit_state" jdbcType="VARCHAR" property="depositState" />
    <result column="withdraw_state" jdbcType="VARCHAR" property="withdrawState" />
    <result column="min_deposit_amount" jdbcType="DOUBLE" property="minDepositAmount" />
    <result column="min_withdraw_amount" jdbcType="DOUBLE" property="minWithdrawAmount" />
    <result column="max_withdraw_amount" jdbcType="DOUBLE" property="maxWithdrawAmount" />
    <result column="withdraw_fee" jdbcType="DOUBLE" property="withdrawFee" />
    <result column="origin_poll_pointer" jdbcType="VARCHAR" property="originPollPointer" />
    <result column="mapping_poll_pointer" jdbcType="VARCHAR" property="mappingPollPointer" />
    <result column="origin_poll_time" jdbcType="TIMESTAMP" property="originPollTime" />
    <result column="mapping_poll_time" jdbcType="TIMESTAMP" property="mappingPollTime" />
    <result column="ctime" jdbcType="TIMESTAMP" property="ctime" />
    <result column="utime" jdbcType="TIMESTAMP" property="utime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, origin_blockchain, mapping_blockchain, origin_token_id, mapping_token_id, token_name, 
    deposit_state, withdraw_state, min_deposit_amount, min_withdraw_amount, max_withdraw_amount, 
    withdraw_fee, origin_poll_pointer, mapping_poll_pointer, origin_poll_time, mapping_poll_time, 
    ctime, utime
  </sql>
  <select id="selectByExample" parameterType="org.vite.gateway.database.po.generated.TokenInfoCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from token_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from token_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from token_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.vite.gateway.database.po.generated.TokenInfoCriteria">
    delete from token_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.vite.gateway.database.po.generated.TokenInfo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into token_info (origin_blockchain, mapping_blockchain, 
      origin_token_id, mapping_token_id, token_name, 
      deposit_state, withdraw_state, min_deposit_amount, 
      min_withdraw_amount, max_withdraw_amount, withdraw_fee, 
      origin_poll_pointer, mapping_poll_pointer, 
      origin_poll_time, mapping_poll_time, ctime, 
      utime)
    values (#{originBlockchain,jdbcType=VARCHAR}, #{mappingBlockchain,jdbcType=VARCHAR}, 
      #{originTokenId,jdbcType=VARCHAR}, #{mappingTokenId,jdbcType=VARCHAR}, #{tokenName,jdbcType=VARCHAR}, 
      #{depositState,jdbcType=VARCHAR}, #{withdrawState,jdbcType=VARCHAR}, #{minDepositAmount,jdbcType=DOUBLE}, 
      #{minWithdrawAmount,jdbcType=DOUBLE}, #{maxWithdrawAmount,jdbcType=DOUBLE}, #{withdrawFee,jdbcType=DOUBLE}, 
      #{originPollPointer,jdbcType=VARCHAR}, #{mappingPollPointer,jdbcType=VARCHAR}, 
      #{originPollTime,jdbcType=TIMESTAMP}, #{mappingPollTime,jdbcType=TIMESTAMP}, #{ctime,jdbcType=TIMESTAMP}, 
      #{utime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="org.vite.gateway.database.po.generated.TokenInfo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into token_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="originBlockchain != null">
        origin_blockchain,
      </if>
      <if test="mappingBlockchain != null">
        mapping_blockchain,
      </if>
      <if test="originTokenId != null">
        origin_token_id,
      </if>
      <if test="mappingTokenId != null">
        mapping_token_id,
      </if>
      <if test="tokenName != null">
        token_name,
      </if>
      <if test="depositState != null">
        deposit_state,
      </if>
      <if test="withdrawState != null">
        withdraw_state,
      </if>
      <if test="minDepositAmount != null">
        min_deposit_amount,
      </if>
      <if test="minWithdrawAmount != null">
        min_withdraw_amount,
      </if>
      <if test="maxWithdrawAmount != null">
        max_withdraw_amount,
      </if>
      <if test="withdrawFee != null">
        withdraw_fee,
      </if>
      <if test="originPollPointer != null">
        origin_poll_pointer,
      </if>
      <if test="mappingPollPointer != null">
        mapping_poll_pointer,
      </if>
      <if test="originPollTime != null">
        origin_poll_time,
      </if>
      <if test="mappingPollTime != null">
        mapping_poll_time,
      </if>
      <if test="ctime != null">
        ctime,
      </if>
      <if test="utime != null">
        utime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="originBlockchain != null">
        #{originBlockchain,jdbcType=VARCHAR},
      </if>
      <if test="mappingBlockchain != null">
        #{mappingBlockchain,jdbcType=VARCHAR},
      </if>
      <if test="originTokenId != null">
        #{originTokenId,jdbcType=VARCHAR},
      </if>
      <if test="mappingTokenId != null">
        #{mappingTokenId,jdbcType=VARCHAR},
      </if>
      <if test="tokenName != null">
        #{tokenName,jdbcType=VARCHAR},
      </if>
      <if test="depositState != null">
        #{depositState,jdbcType=VARCHAR},
      </if>
      <if test="withdrawState != null">
        #{withdrawState,jdbcType=VARCHAR},
      </if>
      <if test="minDepositAmount != null">
        #{minDepositAmount,jdbcType=DOUBLE},
      </if>
      <if test="minWithdrawAmount != null">
        #{minWithdrawAmount,jdbcType=DOUBLE},
      </if>
      <if test="maxWithdrawAmount != null">
        #{maxWithdrawAmount,jdbcType=DOUBLE},
      </if>
      <if test="withdrawFee != null">
        #{withdrawFee,jdbcType=DOUBLE},
      </if>
      <if test="originPollPointer != null">
        #{originPollPointer,jdbcType=VARCHAR},
      </if>
      <if test="mappingPollPointer != null">
        #{mappingPollPointer,jdbcType=VARCHAR},
      </if>
      <if test="originPollTime != null">
        #{originPollTime,jdbcType=TIMESTAMP},
      </if>
      <if test="mappingPollTime != null">
        #{mappingPollTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ctime != null">
        #{ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="utime != null">
        #{utime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.vite.gateway.database.po.generated.TokenInfoCriteria" resultType="java.lang.Long">
    select count(*) from token_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update token_info
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.originBlockchain != null">
        origin_blockchain = #{record.originBlockchain,jdbcType=VARCHAR},
      </if>
      <if test="record.mappingBlockchain != null">
        mapping_blockchain = #{record.mappingBlockchain,jdbcType=VARCHAR},
      </if>
      <if test="record.originTokenId != null">
        origin_token_id = #{record.originTokenId,jdbcType=VARCHAR},
      </if>
      <if test="record.mappingTokenId != null">
        mapping_token_id = #{record.mappingTokenId,jdbcType=VARCHAR},
      </if>
      <if test="record.tokenName != null">
        token_name = #{record.tokenName,jdbcType=VARCHAR},
      </if>
      <if test="record.depositState != null">
        deposit_state = #{record.depositState,jdbcType=VARCHAR},
      </if>
      <if test="record.withdrawState != null">
        withdraw_state = #{record.withdrawState,jdbcType=VARCHAR},
      </if>
      <if test="record.minDepositAmount != null">
        min_deposit_amount = #{record.minDepositAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.minWithdrawAmount != null">
        min_withdraw_amount = #{record.minWithdrawAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.maxWithdrawAmount != null">
        max_withdraw_amount = #{record.maxWithdrawAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.withdrawFee != null">
        withdraw_fee = #{record.withdrawFee,jdbcType=DOUBLE},
      </if>
      <if test="record.originPollPointer != null">
        origin_poll_pointer = #{record.originPollPointer,jdbcType=VARCHAR},
      </if>
      <if test="record.mappingPollPointer != null">
        mapping_poll_pointer = #{record.mappingPollPointer,jdbcType=VARCHAR},
      </if>
      <if test="record.originPollTime != null">
        origin_poll_time = #{record.originPollTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.mappingPollTime != null">
        mapping_poll_time = #{record.mappingPollTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.ctime != null">
        ctime = #{record.ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.utime != null">
        utime = #{record.utime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update token_info
    set id = #{record.id,jdbcType=INTEGER},
      origin_blockchain = #{record.originBlockchain,jdbcType=VARCHAR},
      mapping_blockchain = #{record.mappingBlockchain,jdbcType=VARCHAR},
      origin_token_id = #{record.originTokenId,jdbcType=VARCHAR},
      mapping_token_id = #{record.mappingTokenId,jdbcType=VARCHAR},
      token_name = #{record.tokenName,jdbcType=VARCHAR},
      deposit_state = #{record.depositState,jdbcType=VARCHAR},
      withdraw_state = #{record.withdrawState,jdbcType=VARCHAR},
      min_deposit_amount = #{record.minDepositAmount,jdbcType=DOUBLE},
      min_withdraw_amount = #{record.minWithdrawAmount,jdbcType=DOUBLE},
      max_withdraw_amount = #{record.maxWithdrawAmount,jdbcType=DOUBLE},
      withdraw_fee = #{record.withdrawFee,jdbcType=DOUBLE},
      origin_poll_pointer = #{record.originPollPointer,jdbcType=VARCHAR},
      mapping_poll_pointer = #{record.mappingPollPointer,jdbcType=VARCHAR},
      origin_poll_time = #{record.originPollTime,jdbcType=TIMESTAMP},
      mapping_poll_time = #{record.mappingPollTime,jdbcType=TIMESTAMP},
      ctime = #{record.ctime,jdbcType=TIMESTAMP},
      utime = #{record.utime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.vite.gateway.database.po.generated.TokenInfo">
    update token_info
    <set>
      <if test="originBlockchain != null">
        origin_blockchain = #{originBlockchain,jdbcType=VARCHAR},
      </if>
      <if test="mappingBlockchain != null">
        mapping_blockchain = #{mappingBlockchain,jdbcType=VARCHAR},
      </if>
      <if test="originTokenId != null">
        origin_token_id = #{originTokenId,jdbcType=VARCHAR},
      </if>
      <if test="mappingTokenId != null">
        mapping_token_id = #{mappingTokenId,jdbcType=VARCHAR},
      </if>
      <if test="tokenName != null">
        token_name = #{tokenName,jdbcType=VARCHAR},
      </if>
      <if test="depositState != null">
        deposit_state = #{depositState,jdbcType=VARCHAR},
      </if>
      <if test="withdrawState != null">
        withdraw_state = #{withdrawState,jdbcType=VARCHAR},
      </if>
      <if test="minDepositAmount != null">
        min_deposit_amount = #{minDepositAmount,jdbcType=DOUBLE},
      </if>
      <if test="minWithdrawAmount != null">
        min_withdraw_amount = #{minWithdrawAmount,jdbcType=DOUBLE},
      </if>
      <if test="maxWithdrawAmount != null">
        max_withdraw_amount = #{maxWithdrawAmount,jdbcType=DOUBLE},
      </if>
      <if test="withdrawFee != null">
        withdraw_fee = #{withdrawFee,jdbcType=DOUBLE},
      </if>
      <if test="originPollPointer != null">
        origin_poll_pointer = #{originPollPointer,jdbcType=VARCHAR},
      </if>
      <if test="mappingPollPointer != null">
        mapping_poll_pointer = #{mappingPollPointer,jdbcType=VARCHAR},
      </if>
      <if test="originPollTime != null">
        origin_poll_time = #{originPollTime,jdbcType=TIMESTAMP},
      </if>
      <if test="mappingPollTime != null">
        mapping_poll_time = #{mappingPollTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ctime != null">
        ctime = #{ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="utime != null">
        utime = #{utime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.vite.gateway.database.po.generated.TokenInfo">
    update token_info
    set origin_blockchain = #{originBlockchain,jdbcType=VARCHAR},
      mapping_blockchain = #{mappingBlockchain,jdbcType=VARCHAR},
      origin_token_id = #{originTokenId,jdbcType=VARCHAR},
      mapping_token_id = #{mappingTokenId,jdbcType=VARCHAR},
      token_name = #{tokenName,jdbcType=VARCHAR},
      deposit_state = #{depositState,jdbcType=VARCHAR},
      withdraw_state = #{withdrawState,jdbcType=VARCHAR},
      min_deposit_amount = #{minDepositAmount,jdbcType=DOUBLE},
      min_withdraw_amount = #{minWithdrawAmount,jdbcType=DOUBLE},
      max_withdraw_amount = #{maxWithdrawAmount,jdbcType=DOUBLE},
      withdraw_fee = #{withdrawFee,jdbcType=DOUBLE},
      origin_poll_pointer = #{originPollPointer,jdbcType=VARCHAR},
      mapping_poll_pointer = #{mappingPollPointer,jdbcType=VARCHAR},
      origin_poll_time = #{originPollTime,jdbcType=TIMESTAMP},
      mapping_poll_time = #{mappingPollTime,jdbcType=TIMESTAMP},
      ctime = #{ctime,jdbcType=TIMESTAMP},
      utime = #{utime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>